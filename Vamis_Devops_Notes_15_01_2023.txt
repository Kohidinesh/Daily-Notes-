###################
Jan 15 Session Agenda
#################################
what is Docker?
what are the reasons to use docker?



with docker how to run a java based spring boot app?


with docker how to run python,nodejs and golang applications as wlel


############################################################
how to push docker images to docker hub or amazon ecr using jenkins pipeline
###########################################################################


what is docker compose & docker swarm?

what are the disadvanates of docker swarm and why people are using k8s?

what is k8s architecture?
what to create a simple single node k8s cluster and deploy our docker images there ?

#####################################################################################


History before containerization
reasons to use containers
what is docker?
what os docker file and images and contianers
what is docker compose and docker swarm?


Before containerization came into picture everyone used to organize applications and their dependencies in its own virtual machine

these VM's run multple applications on the same physical hardware and this process is caled virtualization

virtualization has drawbacks
##################################
1.VM's will be large or bulky in size
2.running mukiples Virtual Machines lead to unstable performance
3.boot up process usually take a long time and VM's wont solve the problems kike portabiklity
software updates or CI CD
################################################


Containerization
###############################
Containerization is a type of Virtualization which brings Virtualization to the system level.
while Virtualization brings abstraction to rrhe hardware  Containerization brings abstraction to the OS 

Reasons to use Containers
#####################################
1.container have no guest OS and use Host OS. so they share relevant libaries and resources as and when needed
2.processing and execution of applications are very fast since application specific
binaries and libraries run on the host kernel
3.Booting up a container takes only a fraction of second and also lightweight than vm's


amazon linux2
############################




what is docker file?
how to write docker file for java based spring boot application
?

Dockerfile
####################
text document which contains all the commands that a user can call on the command line to assemble an image



docker pull nginx
###########################

Dockerfile
####################
FROM nginx


how to run a java spring boot app from command line?

how to creata a project is different?


java -jar locationofjarfile

java -jar app.jar

java -jar /home/ec2-user/app.jar

#####################
to run anove command what and all we need?

java is needed?
jar file is needed?

apache maven is needed only during the CI process not during CD process -- to run jar file maven is not needed ?
to build jar file or war file only then for java proejcts we need apaacht ant or apache maven or gradle

##############################################################

in docker process as well we need to get java and copy jar file or download jar file
and then run jar file

3-4 instcutions
######################

FROM
COPY
ADD
ENTRYPOINT
############################



##################################
FROM openjdk:8 
COPY target/springboot-maven-course-micro-svc-0.0.1-SNAPSHOT.jar app.jar
ENTRYPOINT ["java","-jar","app.jar"]


when we build a maven project jar or war file will be present in target directory.
and as a part of Cd process this jar file is needed thats why we are copyung this jar file into the docker image
so that container run will use this jar file

ENTRYPOINT
ENTRYPOINT has two forms:

ENTRYPOINT ["executable", "param1", "param2"] (exec form, preferred)
ENTRYPOINT command param1 param2 (shell form)
An ENTRYPOINT allows you to configure a container that will run as an executable.


FROM openjdk:11
COPY target/springboot-maven-course-micro-svc-0.0.1-SNAPSHOT.jar app.jar
ENTRYPOINT ["java","-jar","app.jar"]

2 servers
#################
server-1 i will do regular build process and use this docker file to build image and push to docker hub or amazon ecr
server-2 i will pull the image from docker hub or ecr and run the container

server-1
##############
regular build processing

java
git
maven 
docker

################################

[root@ci-process springboot-maven-course-micro-svc]# sudo docker image build -t cloudtechmasters/springboot-maven-course-micro-svc:jan15 .
Sending build context to Docker daemon  19.59MB
Step 1/3 : FROM openjdk:8
 ---> b273004037cc
Step 2/3 : COPY target/springboot-maven-course-micro-svc-0.0.1-SNAPSHOT.jar app.jar
 ---> Using cache
 ---> de0cc32e59b7
Step 3/3 : ENTRYPOINT ["java","-jar","/app.jar"]
 ---> Using cache
 ---> 6360c8703355
Successfully built 6360c8703355
Successfully tagged cloudtechmasters/springboot-maven-course-micro-svc:jan15



once the image is built we need to store the docker image in any of the below docker registires

1.docker hub
2.amazon ecr/ azure acr /google gcr
3.nexus or jfrog



1.docker hub
#####################
keep docker hub username and password handy
and login to docker hub server using username and password


https://index.docker.io/v1/

docker login -u username -p password dockerhubregistryserverurl

docker login -u cloudtechmasters -p Manager#436  https://index.docker.io/v1/


[root@ci-process springboot-maven-course-micro-svc]# cat /root/.docker/config.json
{
        "auths": {
                "https://index.docker.io/v1/": {
                        "auth": "Y2xvdWR0ZWNobWFzdGVyczpNYW5hZ2VyIzQzNg=="
                }
        }
}

Y2xvdWR0ZWNobWFzdGVyczpNYW5hZ2VyIzQzNg==  
base64 encode of username:password

cloudtechmasters:Manager#436
[root@ci-process springboot-maven-course-micro-svc]# echo "cloudtechmasters:Manager#436" | base64
Y2xvdWR0ZWNobWFzdGVyczpNYW5hZ2VyIzQzNgo=


{
        "auths": {
                "https://index.docker.io/v1/": {
                        "auth": ""
                }
        }
}

lets say u wwwant to store the docker image in azure acr
############################################################


[root@ci-process springboot-maven-course-micro-svc]# sudo docker login -u javaregistrydemo -p alv5BFqU6B6sYcGrKwG4oIDYAouxueWgQv0j2a2eSD+ACRB1gGgp javaregistrydemo.azurecr.io
WARNING! Using --password via the CLI is insecure. Use --password-stdin.
WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded


###############3
if we are using aws we need to use aws ecr
################################################
1.create repository in ecr
2.login to aws ecr 
3.push the docker image to aws ecr

######################################
1.create repository in ecr
we can create from gui or we can create from cli
to create from aws ec2 cli we need permission for ecr service

we can create iam user or iam role for the same

aws ecr create-repository \
    --repository-name project-a/springboot-maven-course-micro-svc
	
aws configure set default.region us-east-1


[root@ci-process ~]# aws ecr create-repository     --repository-name project-a/springboot-maven-course-micro-svc
{
    "repository": {
        "repositoryUri": "811502318109.dkr.ecr.us-east-1.amazonaws.com/project-a/springboot-maven-course-micro-svc",
        "imageScanningConfiguration": {
            "scanOnPush": false
        },
        "encryptionConfiguration": {
            "encryptionType": "AES256"
        },
        "registryId": "811502318109",
        "imageTagMutability": "MUTABLE",
        "repositoryArn": "arn:aws:ecr:us-east-1:811502318109:repository/project-a/springboot-maven-course-micro-svc",
        "repositoryName": "project-a/springboot-maven-course-micro-svc",
        "createdAt": 1673786595.0
    }
}


[root@ci-process springboot-maven-course-micro-svc]# sudo docker image push 811502318109.dkr.ecr.us-east-1.amazonaws.com/project-a/springboot-maven-course-micro-svc:jan15
The push refers to repository [811502318109.dkr.ecr.us-east-1.amazonaws.com/project-a/springboot-maven-course-micro-svc]
e064a07dd8e1: Preparing
6b5aaff44254: Preparing
53a0b163e995: Preparing
b626401ef603: Preparing
9b55156abf26: Preparing
293d5db30c9f: Waiting
03127cdb479b: Waiting
9c742cd6c7a5: Waiting
no basic auth credentials


login to ecr before pushing the image


aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 811502318109.dkr.ecr.us-east-1.amazonaws.com


Based on the docker registry we built the docker image 

sudo docker image build -t cloudtechmasters/springboot-maven-course-micro-svc:jan15 .
sudo docker image build -t javaregistrydemo.azurecr.io/springboot-maven-course-micro-svc:jan15 .
sudo docker image build -t 811502318109.dkr.ecr.us-east-1.amazonaws.com/project-a/springboot-maven-course-micro-svc:jan15 .

2.login to docker registry before we push the image

docker login -u cloudtechmasters -p Manager#436  https://index.docker.io/v1/
sudo docker login -u javaregistrydemo -p alv5BFqU6B6sYcGrKwG4oIDYAouxueWgQv0j2a2eSD+ACRB1gGgp javaregistrydemo.azurecr.io
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 811502318109.dkr.ecr.us-east-1.amazonaws.com

3.we pushed the docker image to the corressponding docker registrt

sudo docker image push cloudtechmasters/springboot-maven-course-micro-svc:jan15
sudo docker image push javaregistrydemo.azurecr.io/springboot-maven-course-micro-svc:jan15
sudo docker image push 811502318109.dkr.ecr.us-east-1.amazonaws.com/project-a/springboot-maven-course-micro-svc:jan15

ci process is done
##################################################
CD process create a new server 
and install docker on that server and get iam role for that service if u want to pull images from amazon ecr

1.install docker
2.login to ecr
3.create container 
1.install docker
yum install docker -y && systemctl start docker

2.login to ecr
aws configure set default.region us-east-1
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 811502318109.dkr.ecr.us-east-1.amazonaws.com

3.create container 
docker container run --name=springbootcontainer -p 8080:8080 -d 811502318109.dkr.ecr.us-east-1.amazonaws.com/project-a/springboot-maven-course-micro-svc:jan15

http://54.152.87.21:8080/course-svc/getAllDevopsTools


latest trend is to run the same image with k8s
####################################################
1,single node minikube k8s cluster 
2.i will use the images which we created to run on this k8s cluster (single node)


1.we need to create deployment and then we need to use expose deployment as a service

this can be done with kubectl commands for docker based users
or this can be done with yaml files as well which we call it as manifest giles


kubectl create deployment --image=javaregistrydemo.azurecr.io/springboot-maven-course-micro-svc:jan15 springboot-deployment


###########################
jenkins pipeline to push docker images tto docker hub or amazon ecr or azure acr
jenkins pipeline to pull docker images and run container on docker server or k8s cluster
###############################################################################################

jenkins pipeline to push docker images tto docker hub or amazon ecr or azure acr
################################################################################
pipeline{
    agent any
    tools{
        maven 'maven-3.8.7'
    }
    stages{
        stage('git checkout'){
            steps{
                git 'https://github.com/cloudtechmasters/springboot-maven-course-micro-svc.git'
            }
        }
        
         stage('Build Maven Project'){
            steps{
               sh 'mvn clean package'
            }
        }
        
        stage('Build docker image from docker file of  Project'){
            steps{
               sh 'docker image build -t cloudtechmasters/springboot-maven-course-micro-svc:${BUILD_ID} .'
            }
        }
        
        stage('Login to docker hub and push the image'){
            steps{
                   withCredentials([usernamePassword(credentialsId: 'dockerhub-cloudtechmasters-credentials', passwordVariable: 'password', usernameVariable: 'username')]) {
                    sh 'docker login -u ${username} -p ${password} https://index.docker.io/v1/'
                    sh 'docker image push cloudtechmasters/springboot-maven-course-micro-svc:${BUILD_ID} '
                    }
            }
        }
    }
}



###################################################################################################

Minikube Setup:
--------------

https://github.com/cloudtechmasters/minikube-setup


####################################################################################################


pipeline {
  environment {
    registry = '1111111111111.dkr.ecr.eu-central-1.amazonaws.com/myRepo'
    registryCredential = 'ID_OF_MY_AWS_JENKINS_CREDENTIAL'
    dockerImage = ''
  }
  agent any
  stages {
    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build registry + ":$BUILD_NUMBER"
        }
      }
    }
    stage('Deploy image') {
        steps{
            script{
                docker.withRegistry("https://" + registry, "ecr:eu-central-1:" + registryCredential) {
                    dockerImage.push()
                }
            }
        }
    }
  }
}


################################################################################################################

[7:11 pm, 15/01/2023] Vamshi: https://skundunotes.com/2022/03/30/push-docker-images-to-amazon-ecr-using-yaml-based-azure-pipelines/
[7:11 pm, 15/01/2023] Vamshi: https://cj-hewett.medium.com/azure-devops-pipelines-build-and-push-a-docker-image-to-aws-ecr-bc0d35f8f126
[7:11 pm, 15/01/2023] Vamshi: cross also possible
[7:11 pm, 15/01/2023] Vamshi: if someone wwatns to practise azure
[7:11 pm, 15/01/2023] Vamshi: create free account with creidt card
[7:11 pm, 15/01/2023] Vamshi: as well


[7:11 pm, 15/01/2023] Vamshi: https://cj-hewett.medium.com/azure-devops-pipelines-build-and-push-a-docker-image-to-aws-ecr-bc0d35f8f126
[7:12 pm, 15/01/2023] Vamshi: https://medium.com/@TimvanBaarsen/build-your-spring-boot-project-using-azure-pipelines-in-azure-devops-3305977991d
[7:12 pm, 15/01/2023] Vamshi: https://medium.com/@TimvanBaarsen/build-your-spring-boot-project-using-azure-pipelines-in-azure-devops-3305977991d


pipeline {
  tools {
        maven 'Maven3'
    }
    agent any
        environment {
        //once you create ACR in Azure cloud, use that here
        registryName = "myacrrepo3210"
        //- update your credentials ID after creating credentials for connecting to ACR
        registryCredential = 'ACR'
        dockerImage = ''
        registryUrl = 'myacrrepo3210.azurecr.io'
    }
    
    stages {
        stage('checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'check_out_from_your_repo_after_forking_my_repo']]])
            }
        }
        
        stage ('Build') {
        steps {
            sh 'mvn clean install'           
        }
     }
     
    stage ('Build Docker image') {
        steps {
                script {
                    dockerImage = docker.build registryName
                }
            }
        }
        
    // Uploading Docker images into ACR
        stage('Upload Image to ACR') {
         steps{   
             script {
                docker.withRegistry( "http://${registryUrl}", registryCredential ) {
                dockerImage.push()
                }
            }
          }
        }
        
        stage ('K8S Deploy') {
          steps {
            script {
                withKubeConfig([credentialsId: 'K8S', serverUrl: '']) {
                sh ('kubectl apply -f  jenkins-aks-deploy-from-acr.yaml')
                }
            }
        }
     }
    }
}



[7:15 pm, 15/01/2023] Vamshi: https://stackoverflow.com/questions/39569926/adding-tags-to-docker-image-from-jenkins
[7:15 pm, 15/01/2023] Vamshi: Hi all pls do practise all these things
[7:16 pm, 15/01/2023] Vamshi: https://medium.com/@vijulpatel865/building-docker-image-using-jenkins-pipeline-push-it-to-aws-ecr-aa02cc7a295e
[7:16 pm, 15/01/2023] Vamshi: https://medium.com/@vijulpatel865/building-docker-image-using-jenkins-pipeline-push-it-to-aws-ecr-aa02cc7a295e
[7:18 pm, 15/01/2023] Vamshi: https://octopus.com/blog/jenkins-docker-ecr
[7:18 pm, 15/01/2023] Vamshi: https://octopus.com/blog/jenkins-docker-ecr
[7:18 pm, 15/01/2023] Vamshi: u can refer all these links as well


pipeline {
    agent any
	environment {
		registry = 'springboot-ecr:latest'
		registryUrl='https://653308993752.dkr.ecr.us-east-1.amazonaws.com'
		registryCredentials = 'ecr:us-east-1:ecr_user_credentials'
		dockerImage = ''
	}
    stages {
        stage ('SCM') {
            steps {
                checkout([$class: 'GitSCM', 
                	branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, 
                	extensions: [], 
                	submoduleCfg: [], 
                	userRemoteConfigs: [[url: 'https://github.com/cloudtechmasters/spring-boot-hello.git']]])
            }
        }
        stage ('Build Artifact') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage ('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build registry
                }
            }
        }
        stage ('Docker Push') {
            steps {
                script {
                    docker.withRegistry(registryUrl,registryCredentials) {
                        dockerImage.push()
                    }
                }
            }
        }
    }
}



[10:13 pm, 15/01/2023] Mupparaju vamsikrishna: https://youtu.be/JYav-S_CViw
[10:13 pm, 15/01/2023] Mupparaju vamsikrishna: https://youtube.com/playlist?list=PLcw5TTdQlsEA4D090a4imIvJkSUkO9HAh


[10:17 pm, 15/01/2023] Vamshi: https://medium.com/@wingyiwy/ci-cd-for-a-piece-java-code-in-jenkins-with-helm-kubernetes-and-aws-ecr-2c3cc1640d25
[10:18 pm, 15/01/2023] Vamshi: https://prabhatsharma.in/blog/how-to-build-docker-images-in-kubernetes-with-jenkins-without-privileges-using-img/
[10:31 pm, 15/01/2023] Vamshi: https://dev.to/bensooraj/accessing-amazon-rds-from-aws-eks-2pc3
[10:31 pm, 15/01/2023] Vamshi: https://dev.to/bensooraj/accessing-amazon-rds-from-aws-eks-2pc3
[10:32 pm, 15/01/2023] Vamshi: this is also one use case
[10:37 pm, 15/01/2023] Vamshi: https://github.com/cloudtechmasters/alb_with_https_traffic_using_self_signed_cert
[10:37 pm, 15/01/2023] Vamshi: this is for application load balancer https one




[8:50 am, 16/01/2023] Vamshi: https://prakashkumar0301.medium.com/azure-devops-ci-cd-pipeline-with-aks-409fd2af52a0
[8:50 am, 16/01/2023] Vamshi: https://www.andyroberts.nz/posts/aks-cicd-azuredevops/
[8:52 am, 16/01/2023] Vamshi: https://levelup.gitconnected.com/up-and-running-with-azure-kubernetes-service-aks-and-devops-pipelines-deployment-40f054071477
[9:05 am, 16/01/2023] Vamshi: stage("docker build & docker push"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'docker_pass', variable: 'docker_password')]) {
                             sh '''
                                docker build -t 34.125.214.226:8083/springapp:${VERSION} .
                                docker login -u admin -p $docker_password 34.125.214.226:8083 
                                docker push  34.125.214.226:8083/springapp:${VERSION}
                                docker rmi 34.125.214.226:8083/springapp:${VERSION}
                            '''
                    }
                }
            }
        }
[9:05 am, 16/01/2023] Vamshi: stage("pushing the helm charts to nexus"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'docker_pass', variable: 'docker_password')]) {
                          dir('kubernetes/') {
                             sh '''
                                 helmversion=$( helm show chart myapp | grep version | cut -d: -f 2 | tr -d ' ')
                                 tar -czvf  myapp-${helmversion}.tgz myapp/
                                 curl -u admin:$docker_password http://34.125.214.226:8081/repository/helm-hosted/ --upload-file myapp-${helmversion}.tgz -v
                            '''
                          }
                    }
                }
            }
        }
[9:05 am, 16/01/2023] Vamshi: if somone uses nexus to store docker images
[9:05 am, 16/01/2023] Vamshi: it will be like this in pipeline
[9:07 am, 16/01/2023] Vamshi: stage('Deploying application on k8s cluster') {
            steps {
               script{
                   withCredentials([kubeconfigFile(credentialsId: 'kubernetes-config', variable: 'KUBECONFIG')]) {
                        dir('kubernetes/') {
                          sh 'helm upgrade --install --set image.repository="34.125.214.226:8083/springapp" --set image.tag="${VERSION}" myjavaapp myapp/ ' 
                        }
                    }
               }
            }
        }
[9:07 am, 16/01/2023] Vamshi: https://octopus.com/blog/jenkins-eks-ecr-deployment
[9:07 am, 16/01/2023] Vamshi: https://octopus.com/blog/jenkins-eks-ecr-deployment
[9:08 am, 16/01/2023] Vamshi: https://andresaaap.medium.com/jenkins-pipeline-for-blue-green-deployment-using-aws-eks-kubernetes-docker-7e5d6a401021
[9:08 am, 16/01/2023] Vamshi: https://andresaaap.medium.com/jenkins-pipeline-for-blue-green-deployment-using-aws-eks-kubernetes-docker-7e5d6a401021
[9:08 am, 16/01/2023] Vamshi: https://www.middlewareinventory.com/blog/aws-blue-green-deployment-jenkins/#:~:text=Conclusion-,What%20is%20Blue%2DGreen%20Deployment%3F,running%20the%20new%20application%20version.
[9:08 am, 16/01/2023] Vamshi: https://www.middlewareinventory.com/blog/aws-blue-green-deployment-jenkins/#:~:text=Conclusion-,What%20is%20Blue%2DGreen%20Deployment%3F,running%20the%20new%20application%20version.




[0:31 am, 17/01/2023] Vamshi: https://www.baeldung.com/ops/docker-share-volume-multiple-containers
[5:09 am, 17/01/2023] Vamshi: https://stackoverflow.com/questions/61880928/what-does-connection-0-to-host-example-com-left-intact-mean
[5:09 am, 17/01/2023] Vamshi: Hi all i will be sharing few imp links
[5:09 am, 17/01/2023] Vamshi: pls pay attention to these links as well
[5:09 am, 17/01/2023] Vamshi: stage('Login to docker hub and push the image'){
            steps{
                   withCredentials([usernamePassword(credentialsId: 'jfrog-credentials', passwordVariable: 'password', usernameVariable: 'username')]) {
                    sh 'docker login -u ${username} -p ${password} https://devopsrbapocjfrog.jfrog.io'
                    sh 'docker image push devopsrbapocjfrog.jfrog.io/docker/springboot-maven-course-micro-svc:${BUILD_ID} '
                    }
            }
        }
		
		
		
helm repo add helm-virtual http://10.1.16.114:32775/artifactory/helm-virtual --username admin --password password
helm repo update


helm repo add helm https://devopsrbapocjfrog.jfrog.io/artifactory/helm --username Karthikjune01@gmail.com --password Login@123


stage("pushing the helm charts to nexus"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'docker_pass', variable: 'docker_password')]) {
                          dir('kubernetes/') {
                             sh '''
                                 helmversion=$( helm show chart myapp | grep version | cut -d: -f 2 | tr -d ' ')
                                 tar -czvf  myapp-${helmversion}.tgz myapp/
                                 curl -u admin:$docker_password http://34.125.214.226:8081/repository/helm-hosted/ --upload-file myapp-${helmversion}.tgz -v
                            '''
                          }
                    }
                }
            }
        }
		
		
		
curl -v -H "Connection: close" -u Karthikjune01@gmail.com:Login@123 https://devopsrbapocjfrog.jfrog.io/artifactory/helm/helm --upload-file myapp-${helmversion}.tgz -v


curl -v -H "Connection: close" -u Karthikjune01@gmail.com:Login@123 https://devopsrbapocjfrog.jfrog.io/artifactory/helm --upload-file myapp-${helmversion}.tgz -v
[5:10 am, 17/01/2023] Vamshi: Nexus & Jfrog also can be used to store docker images
[5:10 am, 17/01/2023] Vamshi: stage("docker build & docker push"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'docker_pass', variable: 'docker_password')]) {
                             sh '''
                                docker build -t 34.125.214.226:8083/springapp:${VERSION} .
                                docker login -u admin -p $docker_password 34.125.214.226:8083 
                                docker push  34.125.214.226:8083/springapp:${VERSION}
                                docker rmi 34.125.214.226:8083/springapp:${VERSION}
                            '''
                    }
                }
            }
        }










[5:13 am, 17/01/2023] Vamshi: rhel8
################


sudo yum update -y
sudo yum install  java-11-openjdk -y
sudo yum install wget -y
wget https://archive.apache.org/dist/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz
tar xvf apache-maven-3.8.4-bin.tar.gz
export PATH=$PATH:/home/ec2-user/apache-maven-3.8.4/bin

sudo yum install unzip -y
wget https://distfiles.macports.org/gradle/gradle-7.4-bin.zip
unzip gradle-7.4-bin.zip
export PATH=$PATH:/home/ec2-user/gradle-7.4/bin


sonar
##############
wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.3.0.51899.zip
unzip sonarqube-9.3.0.51899.zip
/home/ec2-user/sonarqube-9.3.0.51899/bin/linux-x86-64/sonar.sh start
/home/ec2-user/sonarqube-9.3.0.51899/bin/linux-x86-64/sonar.sh status
[5:13 am, 17/01/2023] Vamshi: sudo amazon-linux-extras install epel -y

Option 1: Install headless Amazon Corretto 11:

sudo yum install java-11-amazon-corretto-headless
Option 2: Install the full Amazon Corretto 11:

sudo yum install java-11-amazon-corretto

 sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
  sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
 
sudo  yum install jenkins -y


sudo amazon-linux-extras install ansible2 -y


https://aws.amazon.com/premiumsupport/knowledge-center/ec2-enable-epel/
https://docs.aws.amazon.com/corretto/latest/corretto-11-ug/amazon-linux-install.html
https://archives.jenkins-ci.org/redhat-stable/


pipeline{
    agent any
    stages{
        stage('hello'){
            steps{
                     echo "${params.releaseVersion}"
            }
        }
        
        stage('download jar from maven central '){
             steps {
	                       sh """ sudo ansible-playbook -i /root/hosts /root/download-and-copy-jar.yml
						   --extra-vars '{"verionToBeDownloaded":"${params.releaseVersion}"}' """

               
           }
        }
        
       
    }
}

################
pipeline {
    agent none 
    stages {
        stage('git checkout'){
            agent any
            steps{
                git branch: 'master',    url: 'https://github.com/cloudtechmasters/spring-boot-gradle-demo.git'
            }
        }
        stage('Example Build') {
            agent { docker 'maven:3-alpine' } 
            steps {
                echo 'Hello, Maven'
                sh 'mvn --version'
            }
        }
        stage('Example Test') {
            agent { docker 'gradle:6-jdk8' } 
            steps {
                echo 'Hello, JDK'
                sh 'java -version'
                sh 'gradle clean build'
            }
        }
    }
}

########################
we are going to create a cd pipeline
in the cd pipeline we will use groovy script written in last class which will fetch all the docker image tags as a drop down
and user will select one image tag from the drop down and we will try to run that docker image using ansible playbook

####################################################################################

stage('hello'){
            steps{
                     echo "${params.selectDockerImageTag}"
            }
        }
		
		
[root@ip-172-31-28-182 ~]# cat run-docker-container.yaml
---
- hosts: localhost
  tasks:
    - name: run nginx docker container
      docker_container:
        name: myapplication
        image: nginx
        state: started
        ports:
          - "80:80"
        restart: yes


[root@ip-172-31-28-182 ~]# ansible-playbook run-docker-container.yaml --extra-vars 'selectDockerImageTag=2'

 stage('run docker container'){
             steps {
	                       sh """ sudo ansible-playbook  /root/run-docker-container.yaml --extra-vars '{"selectDockerImageTag":"${params.selectDockerImageTag}"}' """

               
           }
        }
		
		
[root@ip-172-31-28-182 ~]# cat run-docker-container.yaml
---
- hosts: localhost
  tasks:
    - name: stop running container
      docker_container:
        name: myapplication
        state: stopped
    - name: remove running container
      docker_container:
        name: myapplication
        state: absent
    - name: run nginx docker container
      docker_container:
        name: myapplication
        image: cloudtechmasters/spring-boot-gradle-demo:{{selectDockerImageTag}}
        state: started
        ports:
          - "33333:33333"
        restart: yes


###################
i have a java container
i have db container

how to connect both of them 

how to run multiple docker containers at once
?

docker container run --name=container1

docker container run --name=container2


one team is using java 8
another team is using java 11


another team is using maven 3.3.9
another team is using maven 3.8.3

another team is using gradle 7.2

##########################





#############################################################################################


######################################
jenkins ci pipeline for docker based project
##############################################
jenkins docker ci pipeline for dockerhub
################################################
1.checkout the project from github or make sure wehnever some developer commits a code your pipeline should trigger
2.build the project using build tool 
in java case we are using maven or gradle
3.analyze the project using sonarqube
4.build the docker image from docker file
5.login to docker registry (docker hub or amazon ecr)
6.push the dockerimage to docker registry

################################################



usermod -aG docker jenkins
usermod -aG root jenkins
chmod 664 /var/run/docker.sock
But none of them work for me, I tried:

chmod 777 /var/run/docker.sock

5.login to docker registry (docker hub or amazon ecr)
6.push the dockerimage to docker registry

create docker hub credentials in jenkins credentials section

cloudtechmasters


sudo docker login -u cloudtechmasters -p   https://index.docker.io/v1

https://index.docker.io/v1

withCredentials([usernamePassword(credentialsId: 'cloudtechmasters-dockerhub-credentials', passwordVariable: 'password', usernameVariable: 'username')]) {
    sh 'docker login -u ${username} -p ${password} https://index.docker.io/v1'
}

###################
 stage('Login to dockerhub & push the docker image'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'cloudtechmasters-dockerhub-credentials', passwordVariable: 'password', usernameVariable: 'username')]) {
                 sh 'docker login -u ${username} -p ${password} https://index.docker.io/v1'
                 sh 'docker image push cloudetechmasters/springboot-maven-course-micro-svc:$BUILD_NUMBER'
                }
            }
        }
		
##############final working pipeline################
pipeline{
    agent any
    tools{
        maven 'maven-3.8.6'
    }
    stages{
        stage('git checkout'){
            steps{
                git 'url':'https://github.com/cloudtechmasters/springboot-maven-course-micro-svc.git'
            }
        }
        stage('build maven project'){
            steps{
                sh 'mvn clean package'
            }
        }
        stage('building docker image from dockerfile'){
            steps{
                sh 'docker image build -t cloudtechmasters/springboot-maven-course-micro-svc:$BUILD_NUMBER .'
            }
        }
        stage('Login to dockerhub & push the docker image'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'cloudtechmasters-dockerhub-credentials', passwordVariable: 'password', usernameVariable: 'username')]) {
                 sh 'docker login -u ${username} -p ${password}'
                 sh 'docker image push cloudtechmasters/springboot-maven-course-micro-svc:$BUILD_NUMBER'
                }
            }
        }
    }
}


FROM openjdk:11 as base 
WORKDIR /app
COPY . . 
RUN chmod +x gradlew
RUN ./gradlew build 

FROM tomcat:9
WORKDIR webapps
COPY --from=base /app/build/libs/springboot-tomcat-gradle-war-0.0.1-SNAPSHOT.war .
RUN rm -rf ROOT && mv springboot-tomcat-gradle-war-0.0.1-SNAPSHOT.war ROOT.war

in case of maven projects artifacts will be built under target location
in case of gradle it will be under build/libs folder


https://github.com/cloudtechmasters/nov13-gradle-demo/tree/master

ls -lrt build/libs
total 17084
-rw-r--r-- 1 jenkins jenkins 17489503 Aug 13 13:15 nov13-gradle-demo-project-0.0.1-SNAPSHOT.jar
-rw-r--r-- 1 jenkins jenkins     1479 Aug 13 13:15 nov13-gradle-demo-project-0.0.1-SNAPSHOT-plain.jar


###############final working pipeline##########################
pipeline{
    agent any
    tools{
        gradle 'gradle-7.5.1'
    }
    stages{
        stage('git checkout'){
            steps{
                git 'url':'https://github.com/cloudtechmasters/nov13-gradle-demo.git', 'branch':'main'
            }
        }
        stage('build gradle project'){
            steps{
                sh 'gradle clean build'
            }
        }
         stage('list build artifacts'){
            steps{
                sh 'ls -lrt build/libs'
            }
        }
        stage('building docker image from dockerfile'){
            steps{
                sh 'docker image build -t cloudtechmasters/nov13-gradle-demo:$BUILD_NUMBER .'
            }
        }
        stage('Login to dockerhub & push the docker image'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'cloudtechmasters-dockerhub-credentials', passwordVariable: 'password', usernameVariable: 'username')]) {
                 sh 'docker login -u ${username} -p ${password}'
                 sh 'docker image push cloudtechmasters/nov13-gradle-demo:$BUILD_NUMBER'
                }
            }
        }
    }
}

###################################Python Based Projects########################
in python based projects dependencies will be mentioned in a file called requirements.txt
to build python project we are going to use pip 

PIP is a package manager for Python packages


what are the framework in python to create python based projects

1.flask framework
2.django framework

command to build python project is 
pip install -r requirements.txt

finally hiw to run python based projects

python pythonfilename.py

python demo.py

all 4 files will be copied into the container file system using copy command
##########################
FROM python:alpine3.7
COPY . /app
WORKDIR /app
RUN pip install -r requirements.txt
ENTRYPOINT [ "python" ]
CMD [ "demo.py" ]


###########################################################################################################################



####################
##########################
FROM python:alpine3.7
COPY . /app
WORKDIR /app
RUN pip install -r requirements.txt
CMD ["python", "demo.py" ]

####################





################

RUN
RUN instruction allows you to install your application and packages requited for it. It executes any commands on top of the current image and creates a new layer by committing the results. Often you will find multiple RUN instructions in a Dockerfile.

RUN has two forms:

RUN <command> (shell form)
RUN ["executable", "param1", "param2"] (exec form)


###################
using python i want to list iam users or 
we wanted to create a bucket using python
using python we wwanted oto stop ec2 instance

#####################
pipeline{
    agent any
    tools{
        maven 'maven-3.8.6'
    }
    stages{
        stage('git checkout'){
            steps{
                git 'url':'https://github.com/cloudtechmasters/springboot-maven-course-micro-svc.git'
            }
        }
        stage('build maven project'){
            steps{
                sh 'mvn clean package'
            }
        }
        stage('building docker image from dockerfile'){
            steps{
                sh 'docker image build -t 451060642371.dkr.ecr.us-east-1.amazonaws.com/springboot-maven-course-micro-svc:$BUILD_NUMBER .'
            }
        }
        stage('Login to dockerhub & push the docker image'){
            steps{
                 sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 451060642371.dkr.ecr.us-east-1.amazonaws.com'
                 sh 'docker image push 451060642371.dkr.ecr.us-east-1.amazonaws.com/springboot-maven-course-micro-svc:$BUILD_NUMBER'
                }
        }
    }
}


#####################################################################################################################3

[5:14 am, 17/01/2023] Vamshi: https://faun.pub/docker-build-push-with-declarative-pipeline-in-jenkins-2f12c2e43807
[5:14 am, 17/01/2023] Vamshi: you now can use the Jenkins ‘amazon-ecr’ plugin from https://plugins.jenkins.io/amazon-ecr/ for ECR deployments.

pipeline {
  environment {
    registry = '1111111111111.dkr.ecr.eu-central-1.amazonaws.com/myRepo'
    registryCredential = 'ID_OF_MY_AWS_JENKINS_CREDENTIAL'
    dockerImage = ''
  }
  agent any
  stages {
    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build registry + ":$BUILD_NUMBER"
        }
      }
    }
    stage('Deploy image') {
        steps{
            script{
                docker.withRegistry("https://" + registry, "ecr:eu-central-1:" + registryCredential) {
                    dockerImage.push()
                }
            }
        }
    }
  }
}



############################################################################################################################



[7:41 am, 17/01/2023] +1 (403) 404-4798: If we wanna store the artifact into the Amazon s3, should build server need the access to the Amazon s3
[7:41 am, 17/01/2023] Vamshi: in AWS for any service to access other service we need access it can be iam user or iam role
[7:42 am, 17/01/2023] Vamshi: if role attach it to ec2
[7:42 am, 17/01/2023] Vamshi: https://noahhsu.medium.com/jenkins-pipeline-practice-using-git-maven-docker-aws-s3-teams-4120dd64cbc4
[7:42 am, 17/01/2023] Vamshi: https://noahhsu.medium.com/jenkins-pipeline-practice-using-git-maven-docker-aws-s3-teams-4120dd64cbc4
[7:43 am, 17/01/2023] Vamshi: https://devops81.com/2020/01/04/uploading-jenkins-artifacts-to-aws-s3/
[7:44 am, 17/01/2023] Vamshi: https://tech.asimio.net/2018/06/27/Using-an-AWS-S3-Bucket-as-your-Maven-Repository.html




#################################################################################################################################

do the same for nexus docker and jfrog docker:
-----------------------------------------------


[7:49 am, 17/01/2023] Vamshi: do the same for nexus docker and jfrog docker
[7:50 am, 17/01/2023] Vamshi: https://jfrog.com/container-registry/
[7:50 am, 17/01/2023] Vamshi: create free trail from here
[7:50 am, 17/01/2023] Vamshi: https://jfrog.com/container-registry/
[7:51 am, 17/01/2023] Vamshi: https://blog.knoldus.com/how-to-use-nexus-3-as-private-docker-registry/
[7:51 am, 17/01/2023] Vamshi: https://blog.knoldus.com/how-to-use-nexus-3-as-private-docker-registry/
[7:51 am, 17/01/2023] Vamshi: https://blog.knoldus.com/how-to-use-nexus-3-as-private-docker-registry/


#####












